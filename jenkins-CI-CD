pipeline {
   agent { label 'agent1' }
   environment {
           DEV_DB_URL = 'jdbc:h2:mem:test_database;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;IFEXISTS=FALSE'
           TEST_DB_URL = 'jdbc:h2:mem:test_database;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;IFEXISTS=FALSE'
           PROD_DB_URL = 'jdbc:postgresql://192.168.136.132:5432/devops?createDatabaseIfNotExist=true'
       }
    stages {
        stage('Checkout') {
            steps {
                echo "Getting Project from Git"
                git branch: "main",
                    url: "https://github.com/ibrahim-jridi2/DevopsProject.git"
            }
        }
         stage('coverage test') {
                    steps {
                        script {
                            sh 'mvn clean test -P test jacoco:report'
                        }
                    }
                    }
        stage('SonarQube analysis') {
            steps {
                script {

                    sh 'mvn compile sonar:sonar -Dsonar.host.url=https://sonarcloud.io/ -Dsonar.organization=deployapplication -Dsonar.projectKey=deployapplication_newproject -Dsonar.login=92fab6e825aef77c0b2694fc82dd679f24fc8659'
                }
            }
        }
        stage('Build Artifact') {
            steps {
                sh 'mvn package -DskipTests'
            }
        }
        stage('Deploy Artifact to Dev') {
            environment {
                SPRING_PROFILES_ACTIVE = 'dev'
                DB_URL = DEV_DB_URL
            }
            steps {
                sh 'mvn deploy -DskipTests'
            }
        }
        stage('Deploy Artifact to Test') {
            environment {
                SPRING_PROFILES_ACTIVE = 'test'
                DB_URL = TEST_DB_URL
            }
            steps {
                sh 'mvn deploy -DskipTests'
            }
        }
        stage('Deploy Artifact to Prod') {
            environment {
                SPRING_PROFILES_ACTIVE = 'prod'
                DB_URL = PROD_DB_URL
            }
            steps {
                sh 'mvn deploy -DskipTests'
            }
        }
        stage('Build Docker image') {
            steps {
                script {
                    sh 'docker build -t app-container .'
                }
            }
        }
        stage('Run Docker image with docker compose') {
            steps {
                script {
                     sh 'docker-compose up --build -d'
                }
            }
        }
        stage('Send Email') {
                    steps {
                        emailext (
                            to: 'ibrahim@yopmail.com',
                            subject: "Pipeline ${currentBuild.currentResult}",
                            body: "Pipeline ${currentBuild.currentResult}"
                        )
                    }
                }
    }
    post {
        always {
            cleanWs()
        }
    }
}
